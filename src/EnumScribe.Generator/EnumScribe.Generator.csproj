<Project Sdk="Microsoft.NET.Sdk">

	<PropertyGroup Label="Project configuration">
		<TargetFramework>netstandard2.0</TargetFramework>
		<LangVersion>10.0</LangVersion>
		<Nullable>enable</Nullable>
		<Deterministic>true</Deterministic>
		<IsRoslynComponent>true</IsRoslynComponent>
		<EnableNETAnalyzers>true</EnableNETAnalyzers>
		<Features>strict</Features>
		<IsPackable>true</IsPackable>
		<GeneratePackageOnBuild>true</GeneratePackageOnBuild>
		<IncludeBuildOutput>false</IncludeBuildOutput>
	</PropertyGroup>

	<PropertyGroup Label="Assembly configuration">
		<Version>1.1.1</Version>
		<AssemblyVersion>1.1.1.0</AssemblyVersion>
		<FileVersion>1.1.1.0</FileVersion>
	</PropertyGroup>

	<PropertyGroup Label="Nuget configuration">
		<!--https://docs.microsoft.com/en-us/nuget/reference/msbuild-targets#pack-target-->
		<PackageId>EnumScribe</PackageId>
		<PackageVersion>1.1.1</PackageVersion>
		<Authors>Tonu</Authors>
		<Product>EnumScribe</Product>
		<Title>EnumScribe</Title>
		<Description>Generates string properties to access enum descriptions on marked types. Primarily used to simplify binding enum description text in UI elements and avoid runtime reflection. Also allows description access via extension method for targeted enums.</Description>
		<PackageLicenseExpression>MIT</PackageLicenseExpression>
		<PackageProjectUrl>https://github.com/TonuFish/EnumScribe</PackageProjectUrl>
		<PackageIcon>icon_256.png</PackageIcon>
		<PackageIconUrl>https://github.com/TonuFish/EnumScribe/tree/master/img/icon_256.png</PackageIconUrl>
		<PackageReadmeFile>README.md</PackageReadmeFile>
		<PackageTags>description attribute description-attribute enum C# generator source-generator extensions extension-method</PackageTags>
		<PackageReleaseNotes>See https://github.com/TonuFish/EnumScribe/tree/master/CHANGELOG.md for release notes.</PackageReleaseNotes>
		<RepositoryUrl>https://github.com/TonuFish/EnumScribe.git</RepositoryUrl>
		<RepositoryType>git</RepositoryType>
		<RepositoryBranch>master</RepositoryBranch>
	</PropertyGroup>

	<ItemGroup Label="Package configuration">
		<None Include="$(OutputPath)\$(AssemblyName).dll" Pack="true" PackagePath="analyzers/dotnet/cs" Visible="false" />
		<!-- Manually pack the public API and doc file as they can't be referenced by the generator directly -->
		<!-- TODO: Can likely do this cleaner with a .nuspec setup... -->
		<None Include="..\EnumScribe\bin\$(Configuration)\netstandard2.0\EnumScribe.dll" Pack="true" PackagePath="lib/netstandard2.0" Visible="false" />
		<None Include="..\EnumScribe\bin\$(Configuration)\netstandard2.0\EnumScribe.xml" Pack="true" PackagePath="lib/netstandard2.0" Visible="false" />
		<None Include="..\..\img\icon_256.png" Pack="true" PackagePath="\" Visible="false" />
		<None Include="..\..\.nuget\README.md" Pack="true" PackagePath="\" Visible="false" />
		<AdditionalFiles Include="AnalyzerReleases.Shipped.md" Pack="true" />
		<AdditionalFiles Include="AnalyzerReleases.Unshipped.md" />
	</ItemGroup>

	<ItemGroup Label="Private references">
		<PackageReference Include="Microsoft.CodeAnalysis.Analyzers" Version="3.3.3" PrivateAssets="all" />
		<PackageReference Include="Microsoft.CodeAnalysis.CSharp.Workspaces" Version="4.1.0" PrivateAssets="all" />
	</ItemGroup>

	<ItemGroup Label="Project references">
		<!-- There is currently no reasonable way to import an in-solution non-analyzer project into a generator.
		As the public API has no additional dependencies, including its' files directly in the generator works well enough. -->
		<Compile Include="..\EnumScribe\**\*.cs" />
		<Compile Remove="..\EnumScribe\obj\**\*.cs" />
	</ItemGroup>

	<ItemGroup Label="Test configuration">
		<InternalsVisibleTo Include="EnumScribe.Tests"/>
	</ItemGroup>

</Project>
